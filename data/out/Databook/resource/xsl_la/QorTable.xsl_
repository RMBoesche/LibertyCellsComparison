<?xml version="1.0" encoding="ISO-8859-1"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xd="http://www.pnp-software.com/XSLTdoc">
  
  <xd:doc type="stylesheet">
    <xd:copyright>&#169; 1984-2024 Silvaco, Inc. All rights reserved.</xd:copyright>
    <xd:MyProperty>
      <xd:MyCaption>Copyright Notice:</xd:MyCaption>
      <xd:MyLine>This document contains confidential and proprietary information.</xd:MyLine>
      <xd:MyLine>Reproduction or usage of this document, in part or whole, by any means, electrical, mechanical, optical, chemical or otherwise is prohibited, without written permission from Silvaco, Inc.</xd:MyLine>
      <xd:MyLine>The information contained herein is protected by U.S. and international copyright laws.</xd:MyLine>
    </xd:MyProperty>
  </xd:doc>
  
  <xsl:include href="NavigationBar.xsl"/>
  <xsl:include href="TimingTable.xsl"/> 

  <!-- QoR table processment -->
  <xd:doc>Redirects QoR and Max Cap data to be processed by the proper template</xd:doc>
  <xsl:template match="QoRTable | MaxCapTable">
    <xsl:call-template name="BuildTable"/>
  </xsl:template>
  
  
  
  <!-- Table processment -->
  <xd:doc>Builds the table page. Calls the appropriate templates to build each section of the page</xd:doc>
  <xsl:template name="BuildTable">
    
    <xsl:variable name="Title">
      <xsl:call-template name="Map">
        <xsl:with-param name="map" select="$MapNode/summary"/>
        <xsl:with-param name="key" select="concat(@Name,'_Title')"/>
      </xsl:call-template>
<!-- Commented out for bug 19638
      <xsl:if test="@Name!=$QOR">
        <xsl:value-of select="concat(' [', @CornerName, ']')"/>
      </xsl:if> 
-->
    </xsl:variable>
    
    <html>
      <head>
        <title>
          <xsl:value-of select="$Title"/>
        </title>
        <xsl:call-template name="Includes"/>
      </head>
      <body onLoad="NanInit();">

        <a id="PageInfo">
          <xsl:attribute name="RootPath"><xsl:value-of select="$RootPath"/></xsl:attribute>
          <xsl:attribute name="CellPath"><xsl:value-of select="'Cells/'"/></xsl:attribute>
          <xsl:attribute name="SummName"><xsl:value-of select="/*/@Name"/></xsl:attribute>
          <xsl:attribute name="Corner"><xsl:value-of select="$Corner"/></xsl:attribute>
          <xsl:attribute name="RefNode"><xsl:value-of select="$RefNode/@Name"/></xsl:attribute>
          <xsl:attribute name="TrgNode"><xsl:value-of select="$TrgNode/@Name"/></xsl:attribute>
          <xsl:attribute name="FileExt"><xsl:value-of select="$Extensions/Cell"/></xsl:attribute>
        </a>

        
        <xsl:call-template name="SilvacoHeader">
          <xsl:with-param name="dir"   select="'.'"/>
          <xsl:with-param name="Title"  select="$Title"/>
        </xsl:call-template>

        <!-- Top navigation links -->
        <xsl:call-template name="AutoBuildNavigationBar">
          
          <xsl:with-param name="PrevName">
            <xsl:if test="Navigation/Previous">
              <xsl:call-template name="Map">
                <xsl:with-param name="map" select="$MapNode/summary"/>
                <xsl:with-param name="key" select="concat(Navigation/Previous/@Name,'_Title')"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:with-param>
          
          <xsl:with-param name="NextName">
            <xsl:if test="Navigation/Next">
              <xsl:call-template name="Map">
                <xsl:with-param name="map" select="$MapNode/summary"/>
                <xsl:with-param name="key" select="concat(Navigation/Next/@Name,'_Title')"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:with-param>
          
        </xsl:call-template>
        
        <xsl:call-template name="TitleNotesQoR"/>

        <xsl:call-template name="GenTableQoR"/>
        <xsl:call-template name="NotesQoR"/>
        
        <!-- Bottom navigation links -->
        <xsl:call-template name="AutoBuildNavigationBar">
          
          <xsl:with-param name="Pos">Bottom</xsl:with-param>
          
          <xsl:with-param name="PrevName">
            <xsl:if test="Navigation/Previous">
              <xsl:call-template name="Map">
                <xsl:with-param name="map" select="$MapNode/summary"/>
                <xsl:with-param name="key" select="concat(Navigation/Previous/@Name,'_Title')"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:with-param>
          
          <xsl:with-param name="NextName">
            <xsl:if test="Navigation/Next">
              <xsl:call-template name="Map">
                <xsl:with-param name="map" select="$MapNode/summary"/>
                <xsl:with-param name="key" select="concat(Navigation/Next/@Name,'_Title')"/>
              </xsl:call-template>
            </xsl:if>
          </xsl:with-param>
          
        </xsl:call-template>       
       
      </body>
    </html>
    
  </xsl:template>
  
  
  <!-- Generate summary table itself -->
  <xd:doc>Inside a summary table page, generates the tables themselves.</xd:doc>
  <xsl:template name="GenTableQoR">
    <a>
        
      <xsl:attribute name="name">
        <xsl:value-of select="concat('Table_',@Name)"/>
      </xsl:attribute>

      <xsl:if test="@Name='QOR'">      
        <xsl:call-template name="CreateTableCaption"/>        
        <span>         
          <xsl:attribute name="id">
            <xsl:value-of select="concat('_Table_',@Id)"/>
          </xsl:attribute>        
          <xsl:call-template name="CreateQoRTable"/>
        </span>
      </xsl:if>

      <xsl:if test="@Name='MXC'">
        <xsl:call-template name="CreateMaxCapTable"/>
      </xsl:if>             
    </a>

  </xsl:template>

  <xd:doc>
    Builds the Max Cap Table
  </xd:doc>
  <xsl:template name="CreateMaxCapTable">

    <xsl:for-each select="Table">
      <xsl:call-template name="CreateTableCaption"/>      
      <span>
        
        <xsl:attribute name="id">
          <xsl:value-of select="concat('_Table_',@Id)"/>
        </xsl:attribute>

        <xsl:variable name="libMaxCap">
          <xsl:if test="El/lib_max_cap">
            <xsl:call-template name="FormatUnit">
              <xsl:with-param name="value" select="El/lib_max_cap"/>
            </xsl:call-template>
          </xsl:if>
        </xsl:variable>

        <div>
          <xsl:attribute name="ngTable">mxcSumm</xsl:attribute>
          <xsl:attribute name="mxcSumm"><xsl:value-of select="$capLabel"/></xsl:attribute>
          <xsl:attribute name="hasEMData"><xsl:value-of select="/*/@HasEMData"/></xsl:attribute>
          <xsl:attribute name="libMaxCap"><xsl:value-of select="$libMaxCap"/></xsl:attribute>
          <xsl:variable name="entries">
            <xsl:for-each select="El">
              <xsl:value-of select="@Name"/>;              
              <xsl:if test="$libMaxCap != ''">
                <xsl:choose>
                  <xsl:when test="lib_max_cap_fo">
                    <xsl:call-template name="FormatUnit">
                      <xsl:with-param name="value"   select="lib_max_cap_fo"/>
                      <xsl:with-param name="pattern" select="'0'"/>
                    </xsl:call-template><xsl:if test="lib_max_cap_fo/@tolExceeded='up'">u</xsl:if>
                  </xsl:when>
                  <xsl:otherwise>-</xsl:otherwise>
                </xsl:choose>;
              </xsl:if>               
              <xsl:choose>
                <xsl:when test="max_capacitance">
                  <xsl:call-template name="FormatUnit">
                    <xsl:with-param name="value"   select="max_capacitance"/>
                    <xsl:with-param name="pattern" select="'0.0000'"/>
                  </xsl:call-template><xsl:if test="max_capacitance/@tolExceeded='up'">u</xsl:if><xsl:if test="max_capacitance/@tolExceeded='down'">d</xsl:if>
                </xsl:when>
                <xsl:otherwise>-</xsl:otherwise>
              </xsl:choose>;
              <xsl:choose>
                <xsl:when test="max_cap_fo">
                  <xsl:call-template name="FormatUnit">
                    <xsl:with-param name="value"   select="max_cap_fo"/>
                    <xsl:with-param name="pattern" select="'0'"/>
                  </xsl:call-template><xsl:if test="max_cap_fo/@tolExceeded='up'">u</xsl:if>
                </xsl:when>
                <xsl:otherwise>-</xsl:otherwise>
              </xsl:choose>;
              <xsl:if test="/*/@HasEMData='yes'">
                <xsl:choose>
                  <xsl:when test="max_cap_em">
                    <xsl:call-template name="FormatUnit">
                      <xsl:with-param name="value"   select="max_cap_em"/>
                      <xsl:with-param name="pattern" select="'0.0000'"/>
                    </xsl:call-template><xsl:if test="max_cap_em/@tolExceeded='up'">u</xsl:if><xsl:if test="max_cap_em/@tolExceeded='down'">d</xsl:if>
                  </xsl:when>
                  <xsl:otherwise>-</xsl:otherwise>
                </xsl:choose>;
                <xsl:choose>
                  <xsl:when test="max_cap_power_fo">
                    <xsl:call-template name="FormatUnit">
                      <xsl:with-param name="value"   select="max_cap_power_fo"/>
                      <xsl:with-param name="pattern" select="'0'"/>
                    </xsl:call-template><xsl:if test="max_cap_power_fo/@tolExceeded='up'">u</xsl:if>
                  </xsl:when>
                  <xsl:otherwise>-</xsl:otherwise>
                </xsl:choose>;
              </xsl:if>
              <xsl:value-of select="max_cap_flag"/>;
              <xsl:value-of select="max_cap_out_of_bounds"/>;
              <xsl:value-of select="max_cap_bounded_by_delay"/>;
              <xsl:value-of select="max_cap_below_min_fo"/>;
              <xsl:value-of select="liberty_max_cap_below_min_fo"/>;$
            </xsl:for-each>
          </xsl:variable>
          <xsl:attribute name="entries"><xsl:value-of select="translate(normalize-space($entries),' ','')"/></xsl:attribute>
        </div>
      </span>
    </xsl:for-each>
    <ul>
      <xsl:if test="@Name=$MXC">
        <xsl:if test="/*/@HasEMData='yes'">
          <li><xsl:text> &#8224; : no capacitance value meets required current and frequency</xsl:text></li>
          <li><xsl:text> &#8225; : maximum capacitance value could not be precisely calculated</xsl:text></li>
          <li><xsl:text> &#176; : maximum capacitance value bounded by frequency</xsl:text></li>
        </xsl:if>
        <li><xsl:text> &#8226; : maximum capacitance is out of characterization limits</xsl:text></li>
        <xsl:if test="/*/@minFO != '-1'">
          <li><xsl:text> &#168; : maximum capacitance is below minimum fanout (</xsl:text><xsl:value-of select="/*/@minFO"/><xsl:text>)</xsl:text></li>
        </xsl:if>
      </xsl:if>
    </ul>
    
  </xsl:template>

  <xd:doc>
    Builds the QoR Table
  </xd:doc>
  <xsl:template name="CreateQoRTable">

    <hr class="Title"/>
    <xsl:variable name="hasMaxCap">
      <xsl:choose>
        <xsl:when test="El/max_cap">y</xsl:when>
        <xsl:otherwise>n</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="numCols">
      <xsl:choose>
        <xsl:when test="$hasMaxCap='y'">6</xsl:when>
        <xsl:otherwise>5</xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <div>
      <xsl:attribute name="ngTable">QoRSumm</xsl:attribute>
      <xsl:attribute name="QoRSumm"><xsl:value-of select="$numCols"/></xsl:attribute>
      <xsl:variable name="entries">
        <xsl:for-each select="El">
          <xsl:value-of select="@Name"/>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="cell"/>
          </xsl:call-template><xsl:if test="cell/@tolExceeded='down'">d</xsl:if><xsl:if test="cell/@tolExceeded='up'">u</xsl:if>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="area"/>
          </xsl:call-template><xsl:if test="area/@tolExceeded='down'">d</xsl:if><xsl:if test="area/@tolExceeded='up'">u</xsl:if>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="delay"/>
          </xsl:call-template><xsl:if test="delay/@tolExceeded='down'">d</xsl:if><xsl:if test="delay/@tolExceeded='up'">u</xsl:if>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="switching"/>
          </xsl:call-template><xsl:if test="switching/@tolExceeded='down'">d</xsl:if><xsl:if test="switching/@tolExceeded='up'">u</xsl:if>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="leakage"/>
          </xsl:call-template><xsl:if test="leakage/@tolExceeded='down'">d</xsl:if><xsl:if test="leakage/@tolExceeded='up'">u</xsl:if>;
          <xsl:if test="$hasMaxCap='y'">
            <xsl:call-template name="FormatUnit">
              <xsl:with-param name="value" select="max_cap"/>
            </xsl:call-template><xsl:if test="max_cap/@tolExceeded='down'">d</xsl:if><xsl:if test="max_cap/@tolExceeded='up'">u</xsl:if>;
          </xsl:if>
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="driveability"/>
          </xsl:call-template><xsl:if test="driveability/@tolExceeded='down'">d</xsl:if><xsl:if test="driveability/@tolExceeded='up'">u</xsl:if>;
          <xsl:call-template name="FormatUnit">
            <xsl:with-param name="value" select="input_cap"/>
          </xsl:call-template><xsl:if test="input_cap/@tolExceeded='down'">d</xsl:if><xsl:if test="input_cap/@tolExceeded='up'">u</xsl:if>;
          <xsl:value-of select="@seq"/>;$
        </xsl:for-each>
      </xsl:variable>
      <xsl:attribute name="entries"><xsl:value-of select="translate(normalize-space($entries),' ','')"/></xsl:attribute>
    </div>
  </xsl:template>
  
  <!-- Helper for generating title notes in summary tables -->
  <xd:doc>Generates the informations that appear at the title of the page</xd:doc>
  <xsl:template name="TitleNotesQoR">
    
    <xsl:variable name="Page">
      <xsl:choose>
        <xsl:when test="@Name=$QOR">QoRMeasures</xsl:when>
        <xsl:when test="@Name=$MXC">MaxCapacitance</xsl:when>
      </xsl:choose>
    </xsl:variable>
    
    <xsl:call-template name="CreateTitleCornerNote">
      <xsl:with-param name="Page" select="$Page"/>
    </xsl:call-template>

    <xsl:if test="@Name=$QOR">
      <xsl:variable name="hasMaxCap">
        <xsl:choose>
          <xsl:when test="El/max_cap">y</xsl:when>
          <xsl:otherwise>n</xsl:otherwise>
        </xsl:choose>
      </xsl:variable>
      <p>
        <ul>
          <li type="square">A QoR measure quantify how better or worse a cell is compared to another. A QoR value smaller than 1 means that the target cell is better than the reference cell. A QoR greater than 1 means that the target cell is worse than the reference cell.</li>
          <xsl:choose>
            <xsl:when test="$hasMaxCap='y'">
              <li type="square">Cell QoR is a weighted average of Area, Delay, Switching Power, Leakage Power and Maximum Capacitance QoR measures.</li>
            </xsl:when>
            <xsl:otherwise>
              <li type="square">Cell QoR is a weighted average of Area, Delay, Switching Power and Leakage Power QoR measures.</li>
            </xsl:otherwise>
          </xsl:choose>
          <li type="square">Area QoR (weight = <xsl:value-of select="Weight/@area"/>) is the ratio between cells area attribute.</li>
          <li type="square">Delay QoR (weight = <xsl:value-of select="Weight/@delay"/>) comes from the average worst case fanout-4 propagation delay (data to output for flip-flops, input to output for other cells) deviation.</li>
          <li type="square">Switching Power QoR (weight = <xsl:value-of select="Weight/@dynPwr"/>) comes from the average of the average fanout-4 switching power values deviation.</li>
          <li type="square">Leakage Power QoR (weight = <xsl:value-of select="Weight/@leak"/>) comes from the ratio between cells leakage power attribute.</li>
          <xsl:if test="$hasMaxCap='y'">
            <li type="square">Maximum Capacitance QoR (weight = <xsl:value-of select="Weight/@maxCap"/>) comes from the ratio between cells electromigration maximum capacitance (when available).</li>
          </xsl:if>
          <li type="square">Driveability QoR comes from the ratio between cells drive strength. Drive strength is calculated from a relation between output transition tables for a fanout-4 load.</li>
          <li type="square">Input Capacitance QoR comes from the ratio between the highest input capacitances. Set, reset and scan pins are discarded in this analysis.</li>
        </ul>
      </p>
    </xsl:if>
    <p>See <a href="#Notes">notes</a> for additional information.</p>
    
  </xsl:template>
    
  
  <!-- Generate notes -->
  <xd:doc>Generates the informations that appear at the bottom of the page</xd:doc>
  <xsl:template name="NotesQoR">
    <a name="Notes">
      <xsl:call-template name="CreateCollapse">
        <xsl:with-param name="name">Notes</xsl:with-param>
        <xsl:with-param name="dir">.</xsl:with-param>
      </xsl:call-template>
      
      <span id="_Notes">
        <ul>
          <xsl:variable name="Page">
            <xsl:choose>
              <xsl:when test="@Name=$QOR">QoRMeasures</xsl:when>
              <xsl:when test="@Name=$MXC">MaxCapacitance</xsl:when>
            </xsl:choose>
          </xsl:variable>

          <li>
            <xsl:call-template name="BasicNotes">
              <xsl:with-param name="Page"       select="$Page"/>
            </xsl:call-template>
          </li>
          
          <li>
            <xsl:call-template name="Corner">
              <xsl:with-param name="Page"    select="$Page"/>
            </xsl:call-template>
          </li>
        </ul>
      </span>
    </a>
  </xsl:template>
  
</xsl:stylesheet>
